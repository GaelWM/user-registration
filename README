# User Registration

## Scenario: User Registration and Email Verification using Saga Pattern and Kafka

Goal: Streamline the user registration process and ensure email verification using the Saga pattern and Kafka messaging system.

Microservices Involved:

1. User Service: Handles user registration and manages user-related data.
2. Email Service: Responsible for sending and verifying email addresses.

Scenario Steps:

1. User Registration:

   - A user initiates the registration process by providing their details on the registration form.
   - The User Service receives the registration request and creates a new user account with a unique user ID.
   - It publishes a UserCreated event to a Kafka topic, containing the user details and the user ID.

2. Email Sending:

   - The Email Service is subscribed to the Kafka topic where UserCreated events are published.
   - Upon receiving a UserCreated event, the Email Service extracts the user's email address from the event and generates an email verification token.
   - It sends an email to the user's provided email address, including the verification token, and publishes an EmailSent event to another Kafka topic, containing the user ID.

3. Email Verification:
   - The User Service is subscribed to the Kafka topic where EmailSent events are published.
   - Upon receiving an EmailSent event, the User Service starts processing the event.
   - It retrieves the user ID from the event and associates the email verification token with the user account.
   - If the user verifies the email address by clicking on the verification link in the email, the User Service updates the user's email verification status to "Verified" and publishes an EmailVerified event to the Kafka topic, containing the user Email.
   - If the email verification fails (e.g., expired token or invalid link), the User Service can publish an EmailVerificationFailed event to the Kafka topic, indicating the failure and taking appropriate actions (e.g., notifying the user or retrying the verification process).

#### Project services used

- **ZooKeeper**: Apache ZooKeeper service for Kafka coordination.
- **Kafka**: Apache Kafka broker service.
- **Confluent Control Center**: Web-based UI for managing and monitoring Kafka.
- **User Service**: Custom user service built from source, depending on MongoDB and Kafka.
- **Email Service**: Custom email service built from source, depending on MongoDB and Kafka.
- **User Service Database**: MongoDB container for the user service.
- **Email Service Database**: MongoDB container for the email service.
- **Mongo Express (User)**: Web-based UI for managing the user service MongoDB.
- **Mongo Express (Email)**: Web-based UI for managing the email service MongoDB.
- **MailHog**: Development SMTP server for testing email functionality.

## Prerequisites

Before running this Docker Compose configuration, ensure that you have Docker and Docker Compose installed on your system.

## Usage

1. Create a directory to hold the Docker Compose file.
2. Copy the contents of the Docker Compose file into a file named `docker-compose.yml` within the directory.
3. Open a terminal or command prompt and navigate to the directory containing the Docker Compose file.
4. Run the following command to start the services:

   ```shell
   docker-compose up -d
   ```
